{"Base.Libc.srand":[{"Union{Tuple{}, Tuple{Any}}":"    srand([seed])\n\nInterface to the C `srand(seed)` function.\n"}],"Base.Libc.strftime":[{"Tuple{Any}":"    strftime([format], time)\n\nConvert time, given as a number of seconds since the epoch or a `TmStruct`, to a formatted\nstring using the given format. Supported formats are the same as those in the standard C\nlibrary.\n"}],"Base.Libc.free":[{"Tuple{Ptr}":"    free(addr::Ptr)\n\nCall `free` from the C standard library. Only use this on memory obtained from [`malloc`](@ref), not\non pointers retrieved from other C libraries. [`Ptr`](@ref) objects obtained from C libraries should\nbe freed by the free functions defined in that library, to avoid assertion failures if\nmultiple `libc` libraries exist on the system.\n"}],"Base.Libc.gethostname":[{"Tuple{}":"    gethostname() -> AbstractString\n\nGet the local machine's host name.\n"}],"Base.Libc.time":[{"Tuple{}":"    time()\n\nGet the system time in seconds since the epoch, with fairly high (typically, microsecond) resolution.\n"},{"Tuple{Base.Libc.TmStruct}":"    time(t::TmStruct)\n\nConverts a `TmStruct` struct to a number of seconds since the epoch.\n"}],"Base.Libc.strerror":[{"Tuple{Integer}":"    strerror(n=errno())\n\nConvert a system call error code to a descriptive string\n"}],"Base.Libc.rand":[{"Tuple{}":"    rand([T::Type])\n\nInterface to the C `rand()` function. If `T` is provided, generate a value of type `T`\nby composing two calls to `rand()`. `T` can be `UInt32` or `Float64`.\n"}],"Base.Libc.getpid":[{"Tuple{}":"    getpid() -> Int32\n\nGet Julia's process ID.\n"}],"Base.Libc.realloc":[{"Tuple{Ptr,Integer}":"    realloc(addr::Ptr, size::Integer) -> Ptr{Cvoid}\n\nCall `realloc` from the C standard library.\n\nSee warning in the documentation for [`free`](@ref) regarding only using this on memory originally\nobtained from [`malloc`](@ref).\n"}],"Base.Libc.GetLastError":[{"Union{}":"    GetLastError()\n\nCall the Win32 `GetLastError` function [only available on Windows].\n"}],"Base.Libc.RawFD":[{"Union{}":"    RawFD\n\nPrimitive type which wraps the native OS file descriptor.\n`RawFD`s can be passed to methods like [`stat`](@ref) to\ndiscover information about the underlying file, and can\nalso be used to open streams, with the `RawFD` describing\nthe OS file backing the stream.\n"}],"Base.Libc.errno":[{"Tuple{}":"    errno([code])\n\nGet the value of the C library's `errno`. If an argument is specified, it is used to set the\nvalue of `errno`.\n\nThe value of `errno` is only valid immediately after a `ccall` to a C library routine that\nsets it. Specifically, you cannot call `errno` at the next prompt in a REPL, because lots of\ncode is executed between prompts.\n"}],"Base.Libc.malloc":[{"Tuple{Integer}":"    malloc(size::Integer) -> Ptr{Cvoid}\n\nCall `malloc` from the C standard library.\n"}],"Base.Libc.systemsleep":[{"Union{}":"    systemsleep(s::Real)\n\nSuspends execution for `s` seconds.\nThis function does not yield to Julia's scheduler and therefore blocks\nthe Julia thread that it is running on for the duration of the sleep time.\n\nSee also: [`sleep`](@ref)\n"}],"Base.Libc.flush_cstdio":[{"Tuple{}":"    flush_cstdio()\n\nFlushes the C `stdout` and `stderr` streams (which may have been written to by external C code).\n"}],"Base.Libc.calloc":[{"Tuple{Integer,Integer}":"    calloc(num::Integer, size::Integer) -> Ptr{Cvoid}\n\nCall `calloc` from the C standard library.\n"}],"Base.Libc.FormatMessage":[{"Union{}":"    FormatMessage(n=GetLastError())\n\nConvert a Win32 system call error code to a descriptive string [only available on Windows].\n"}],"Base.Libc.TmStruct":[{"Union{}":"    TmStruct([seconds])\n\nConvert a number of seconds since the epoch to broken-down format, with fields `sec`, `min`,\n`hour`, `mday`, `month`, `year`, `wday`, `yday`, and `isdst`.\n"}],"Base.Libc.strptime":[{"Tuple{AbstractString}":"    strptime([format], timestr)\n\nParse a formatted time string into a `TmStruct` giving the seconds, minute, hour, date, etc.\nSupported formats are the same as those in the standard C library. On some platforms,\ntimezones will not be parsed correctly. If the result of this function will be passed to\n`time` to convert it to seconds since the epoch, the `isdst` field should be filled in\nmanually. Setting it to `-1` will tell the C library to use the current system settings to\ndetermine the timezone.\n"}]}
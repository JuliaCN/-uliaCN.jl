{"Base.Enums.@enum":[{"Tuple{Any,Vararg{Any,N} where N}":"    @enum EnumName[::BaseType] value1[=x] value2[=y]\n\nCreate an `Enum{BaseType}` subtype with name `EnumName` and enum member values of\n`value1` and `value2` with optional assigned values of `x` and `y`, respectively.\n`EnumName` can be used just like other types and enum member values as regular values, such as\n\n# Examples\n```jldoctest fruitenum\njulia> @enum Fruit apple=1 orange=2 kiwi=3\n\njulia> f(x::Fruit) = \"I'm a Fruit with value: $(Int(x))\"\nf (generic function with 1 method)\n\njulia> f(apple)\n\"I'm a Fruit with value: 1\"\n\njulia> Fruit(1)\napple::Fruit = 1\n```\n\nValues can also be specified inside a `begin` block, e.g.\n\n```julia\n@enum EnumName begin\n    value1\n    value2\nend\n```\n\n`BaseType`, which defaults to [`Int32`](@ref), must be a primitive subtype of `Integer`.\nMember values can be converted between the enum type and `BaseType`. `read` and `write`\nperform these conversions automatically.\n\nTo list all the instances of an enum use `instances`, e.g.\n\n```jldoctest fruitenum\njulia> instances(Fruit)\n(apple, orange, kiwi)\n```\n"}],"Base.Enums.Enum":[{"Union{}":"    Enum{T<:Integer}\n\nThe abstract supertype of all enumerated types defined with [`@enum`](@ref).\n"}]}
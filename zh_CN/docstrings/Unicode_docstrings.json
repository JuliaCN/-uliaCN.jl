{"Base.Unicode.lowercasefirst":[{"Tuple{AbstractString}":"    lowercasefirst(s::AbstractString)\n\nReturn `s` with the first character converted to lowercase.\n\nSee also: [`uppercasefirst`](@ref), [`uppercase`](@ref), [`lowercase`](@ref),\n[`titlecase`](@ref)\n\n# Examples\n```jldoctest\njulia> lowercasefirst(\"Julia\")\n\"julia\"\n```\n"}],"Base.Unicode.titlecase":[{"Tuple{AbstractString}":"    titlecase(s::AbstractString; [wordsep::Function], strict::Bool=true) -> String\n\nCapitalize the first character of each word in `s`;\nif `strict` is true, every other character is\nconverted to lowercase, otherwise they are left unchanged.\nBy default, all non-letters are considered as word separators;\na predicate can be passed as the `wordsep` keyword to determine\nwhich characters should be considered as word separators.\nSee also [`uppercasefirst`](@ref) to capitalize only the first\ncharacter in `s`.\n\n# Examples\n```jldoctest\njulia> titlecase(\"the JULIA programming language\")\n\"The Julia Programming Language\"\n\njulia> titlecase(\"ISS - international space station\", strict=false)\n\"ISS - International Space Station\"\n\njulia> titlecase(\"a-a b-b\", wordsep = c->c==' ')\n\"A-a B-b\"\n```\n"}],"Base.Unicode.textwidth":[{"Tuple{AbstractChar}":"    textwidth(c)\n\nGive the number of columns needed to print a character.\n\n# Examples\n```jldoctest\njulia> textwidth('α')\n1\n\njulia> textwidth('⛵')\n2\n```\n"},{"Tuple{AbstractString}":"    textwidth(s::AbstractString)\n\nGive the number of columns needed to print a string.\n\n# Examples\n```jldoctest\njulia> textwidth(\"March\")\n5\n```\n"}],"Base.Unicode.isletter":[{"Tuple{AbstractChar}":"    isletter(c::AbstractChar) -> Bool\n\nTest whether a character is a letter.\nA character is classified as a letter if it belongs to the Unicode general\ncategory Letter, i.e. a character whose category code begins with 'L'.\n\n# Examples\n```jldoctest\njulia> isletter('❤')\nfalse\n\njulia> isletter('α')\ntrue\n\njulia> isletter('9')\nfalse\n```\n"}],"Base.Unicode.lowercase":[{"Tuple{AbstractString}":"    lowercase(s::AbstractString)\n\nReturn `s` with all characters converted to lowercase.\n\n# Examples\n```jldoctest\njulia> lowercase(\"STRINGS AND THINGS\")\n\"strings and things\"\n```\n"}],"Base.Unicode.iscased":[{"Tuple{AbstractChar}":"    iscased(c::AbstractChar) -> Bool\n\nTests whether a character is cased, i.e. is lower-, upper- or title-cased.\n"}],"Base.Unicode.iscntrl":[{"Tuple{AbstractChar}":"    iscntrl(c::AbstractChar) -> Bool\n\nTests whether a character is a control character.\nControl characters are the non-printing characters of the Latin-1 subset of Unicode.\n\n# Examples\n```jldoctest\njulia> iscntrl('\\x01')\ntrue\n\njulia> iscntrl('a')\nfalse\n```\n"}],"Base.Unicode.uppercasefirst":[{"Tuple{AbstractString}":"    uppercasefirst(s::AbstractString) -> String\n\nReturn `s` with the first character converted to uppercase (technically \"title\ncase\" for Unicode). See also [`titlecase`](@ref) to capitalize the first\ncharacter of every word in `s`.\n\nSee also: [`lowercasefirst`](@ref), [`uppercase`](@ref), [`lowercase`](@ref),\n[`titlecase`](@ref)\n\n# Examples\n```jldoctest\njulia> uppercasefirst(\"python\")\n\"Python\"\n```\n"}],"Base.Unicode.isuppercase":[{"Tuple{AbstractChar}":"    isuppercase(c::AbstractChar) -> Bool\n\nTests whether a character is an uppercase letter.\nA character is classified as uppercase if it belongs to Unicode category Lu,\nLetter: Uppercase, or Lt, Letter: Titlecase.\n\n# Examples\n```jldoctest\njulia> isuppercase('γ')\nfalse\n\njulia> isuppercase('Γ')\ntrue\n\njulia> isuppercase('❤')\nfalse\n```\n"}],"Base.Unicode.ispunct":[{"Tuple{AbstractChar}":"    ispunct(c::AbstractChar) -> Bool\n\nTests whether a character belongs to the Unicode general category Punctuation, i.e. a\ncharacter whose category code begins with 'P'.\n\n# Examples\n```jldoctest\njulia> ispunct('α')\nfalse\n\njulia> ispunct('/')\ntrue\n\njulia> ispunct(';')\ntrue\n```\n"}],"Base.Unicode.isnumeric":[{"Tuple{AbstractChar}":"    isnumeric(c::AbstractChar) -> Bool\n\nTests whether a character is numeric.\nA character is classified as numeric if it belongs to the Unicode general category Number,\ni.e. a character whose category code begins with 'N'.\n\nNote that this broad category includes characters such as ¾ and ௰.\nUse [`isdigit`](@ref) to check whether a character a decimal digit between 0 and 9.\n\n# Examples\n```jldoctest\njulia> isnumeric('௰')\ntrue\n\njulia> isnumeric('9')\ntrue\n\njulia> isnumeric('α')\nfalse\n\njulia> isnumeric('❤')\nfalse\n```\n"}],"Base.Unicode.isxdigit":[{"Tuple{AbstractChar}":"    isxdigit(c::AbstractChar) -> Bool\n\nTest whether a character is a valid hexadecimal digit. Note that this does not\ninclude `x` (as in the standard `0x` prefix).\n\n# Examples\n```jldoctest\njulia> isxdigit('a')\ntrue\n\njulia> isxdigit('x')\nfalse\n```\n"}],"Base.Unicode.islowercase":[{"Tuple{AbstractChar}":"    islowercase(c::AbstractChar) -> Bool\n\nTests whether a character is a lowercase letter.\nA character is classified as lowercase if it belongs to Unicode category Ll,\nLetter: Lowercase.\n\n# Examples\n```jldoctest\njulia> islowercase('α')\ntrue\n\njulia> islowercase('Γ')\nfalse\n\njulia> islowercase('❤')\nfalse\n```\n"}],"Base.Unicode.isdigit":[{"Tuple{AbstractChar}":"    isdigit(c::AbstractChar) -> Bool\n\nTests whether a character is a decimal digit (0-9).\n\n# Examples\n```jldoctest\njulia> isdigit('❤')\nfalse\n\njulia> isdigit('9')\ntrue\n\njulia> isdigit('α')\nfalse\n```\n"}],"Base.Unicode.isspace":[{"Tuple{AbstractChar}":"    isspace(c::AbstractChar) -> Bool\n\nTests whether a character is any whitespace character. Includes ASCII characters '\\t',\n'\\n', '\\v', '\\f', '\\r', and ' ', Latin-1 character U+0085, and characters in Unicode\ncategory Zs.\n\n# Examples\n```jldoctest\njulia> isspace('\\n')\ntrue\n\njulia> isspace('\\r')\ntrue\n\njulia> isspace(' ')\ntrue\n\njulia> isspace('\\x20')\ntrue\n```\n"}],"Base.Unicode.isprint":[{"Tuple{AbstractChar}":"    isprint(c::AbstractChar) -> Bool\n\nTests whether a character is printable, including spaces, but not a control character.\n\n# Examples\n```jldoctest\njulia> isprint('\\x01')\nfalse\n\njulia> isprint('A')\ntrue\n```\n"}],"Base.Unicode.uppercase":[{"Tuple{AbstractString}":"    uppercase(s::AbstractString)\n\nReturn `s` with all characters converted to uppercase.\n\n# Examples\n```jldoctest\njulia> uppercase(\"Julia\")\n\"JULIA\"\n```\n"}]}
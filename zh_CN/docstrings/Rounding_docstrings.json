{"Base.Rounding.get_zero_subnormals":[{"Tuple{}":"    get_zero_subnormals() -> Bool\n\nReturn `false` if operations on subnormal floating-point values (\"denormals\") obey rules\nfor IEEE arithmetic, and `true` if they might be converted to zeros.\n\n!!! warning\n\n    This function only affects the current thread.\n"}],"Base.Rounding.RoundNearestTiesUp":[{"Union{}":"    RoundNearestTiesUp\n\nRounds to nearest integer, with ties rounded toward positive infinity (Java/JavaScript\n[`round`](@ref) behaviour).\n"}],"Base.Rounding.RoundUp":[{"Union{}":"    RoundUp\n\n[`round`](@ref) using this rounding mode is an alias for [`ceil`](@ref).\n"}],"Base.Rounding.setrounding":[{"Tuple{Type,Any}":"    setrounding(T, mode)\n\nSet the rounding mode of floating point type `T`, controlling the rounding of basic\narithmetic functions ([`+`](@ref), [`-`](@ref), [`*`](@ref),\n[`/`](@ref) and [`sqrt`](@ref)) and type conversion. Other numerical\nfunctions may give incorrect or invalid values when using rounding modes other than the\ndefault [`RoundNearest`](@ref).\n\nNote that this is currently only supported for `T == BigFloat`.\n\n!!! warning\n\n    This function is not thread-safe. It will affect code running on all threads, but\n    its behavior is undefined if called concurrently with computations that use the\n    setting.\n"},{"Union{Tuple{T}, Tuple{Function,Type{T},RoundingMode}} where T":"    setrounding(f::Function, T, mode)\n\nChange the rounding mode of floating point type `T` for the duration of `f`. It is logically\nequivalent to:\n\n    old = rounding(T)\n    setrounding(T, mode)\n    f()\n    setrounding(T, old)\n\nSee [`RoundingMode`](@ref) for available rounding modes.\n"}],"Base.Rounding.RoundDown":[{"Union{}":"    RoundDown\n\n[`round`](@ref) using this rounding mode is an alias for [`floor`](@ref).\n"}],"Base.Rounding.RoundFromZero":[{"Union{}":"    RoundFromZero\n\nRounds away from zero.\nThis rounding mode may only be used with `T == BigFloat` inputs to [`round`](@ref).\n\n# Examples\n```jldoctest\njulia> BigFloat(\"1.0000000000000001\", 5, RoundFromZero)\n1.06\n```\n"}],"Base.Rounding.set_zero_subnormals":[{"Tuple{Bool}":"    set_zero_subnormals(yes::Bool) -> Bool\n\nIf `yes` is `false`, subsequent floating-point operations follow rules for IEEE arithmetic\non subnormal values (\"denormals\"). Otherwise, floating-point operations are permitted (but\nnot required) to convert subnormal inputs or outputs to zero. Returns `true` unless\n`yes==true` but the hardware does not support zeroing of subnormal numbers.\n\n`set_zero_subnormals(true)` can speed up some computations on some hardware. However, it can\nbreak identities such as `(x-y==0) == (x==y)`.\n\n!!! warning\n\n    This function only affects the current thread.\n"}],"Base.Rounding.rounding":[{"Union{}":"    rounding(T)\n\nGet the current floating point rounding mode for type `T`, controlling the rounding of basic\narithmetic functions ([`+`](@ref), [`-`](@ref), [`*`](@ref), [`/`](@ref)\nand [`sqrt`](@ref)) and type conversion.\n\nSee [`RoundingMode`](@ref) for available modes.\n"}],"Base.Rounding.RoundNearest":[{"Union{}":"    RoundNearest\n\nThe default rounding mode. Rounds to the nearest integer, with ties (fractional values of\n0.5) being rounded to the nearest even integer.\n"}],"Base.Rounding.RoundToZero":[{"Union{}":"    RoundToZero\n\n[`round`](@ref) using this rounding mode is an alias for [`trunc`](@ref).\n"}],"Base.Rounding.RoundNearestTiesAway":[{"Union{}":"    RoundNearestTiesAway\n\nRounds to nearest integer, with ties rounded away from zero (C/C++\n[`round`](@ref) behaviour).\n"}],"Base.Rounding.RoundingMode":[{"Union{}":"    RoundingMode\n\nA type used for controlling the rounding mode of floating point operations (via\n[`rounding`](@ref)/[`setrounding`](@ref) functions), or as\noptional arguments for rounding to the nearest integer (via the [`round`](@ref)\nfunction).\n\nCurrently supported rounding modes are:\n\n- [`RoundNearest`](@ref) (default)\n- [`RoundNearestTiesAway`](@ref)\n- [`RoundNearestTiesUp`](@ref)\n- [`RoundToZero`](@ref)\n- [`RoundFromZero`](@ref) ([`BigFloat`](@ref) only)\n- [`RoundUp`](@ref)\n- [`RoundDown`](@ref)\n"}]}
{"Base.Sys.islinux":[{"Tuple{Symbol}":"    Sys.islinux([os])\n\nPredicate for testing if the OS is a derivative of Linux.\nSee documentation in [Handling Operating System Variation](@ref).\n"}],"Base.Sys.isnetbsd":[{"Tuple{Symbol}":"    Sys.isnetbsd([os])\n\nPredicate for testing if the OS is a derivative of NetBSD.\nSee documentation in [Handling Operating System Variation](@ref).\n\n!!! note\n    Not to be confused with `Sys.isbsd()`, which is `true` on NetBSD but also on\n    other BSD-based systems. `Sys.isnetbsd()` refers only to NetBSD.\n!!! compat \"Julia 1.1\"\n    This function requires at least Julia 1.1.\n"}],"Base.Sys.isjsvm":[{"Tuple{Symbol}":"    Sys.isjsvm([os])\n\nPredicate for testing if Julia is running in a JavaScript VM (JSVM),\nincluding e.g. a WebAssembly JavaScript embedding in a web browser.\n\n!!! compat \"Julia 1.2\"\n    This function requires at least Julia 1.2.\n"}],"Base.Sys.STDLIB":[{"Union{}":"    Sys.STDLIB\n\nA string containing the full path to the directory containing the `stdlib` packages.\n"}],"Base.Sys.set_process_title":[{"Tuple{AbstractString}":"    Sys.set_process_title(title::AbstractString)\n\nSet the process title. No-op on some operating systems.\n"}],"Base.Sys.isopenbsd":[{"Tuple{Symbol}":"    Sys.isopenbsd([os])\n\nPredicate for testing if the OS is a derivative of OpenBSD.\nSee documentation in [Handling Operating System Variation](@ref).\n\n!!! note\n    Not to be confused with `Sys.isbsd()`, which is `true` on OpenBSD but also on\n    other BSD-based systems. `Sys.isopenbsd()` refers only to OpenBSD.\n!!! compat \"Julia 1.1\"\n    This function requires at least Julia 1.1.\n"}],"Base.Sys.free_memory":[{"Tuple{}":"    Sys.free_memory()\n\nGet the total free memory in RAM in kilobytes.\n"}],"Base.Sys.windows_version":[{"Union{}":"    Sys.windows_version()\n\nReturn the version number for the Windows NT Kernel as a `VersionNumber`,\ni.e. `v\"major.minor.build\"`, or `v\"0.0.0\"` if this is not running on Windows.\n"}],"Base.Sys.BINDIR":[{"Union{}":"    Sys.BINDIR\n\nA string containing the full path to the directory containing the `julia` executable.\n"}],"Base.Sys.WORD_SIZE":[{"Union{}":"    Sys.WORD_SIZE\n\nStandard word size on the current machine, in bits.\n"}],"Base.Sys.isapple":[{"Tuple{Symbol}":"    Sys.isapple([os])\n\nPredicate for testing if the OS is a derivative of Apple Macintosh OS X or Darwin.\nSee documentation in [Handling Operating System Variation](@ref).\n"}],"Base.Sys.maxrss":[{"Tuple{}":"    Sys.maxrss()\n\nGet the maximum resident set size utilized in bytes.\nSee also:\n    - man page of getrusage(2) on Linux and FreeBSD.\n    - windows api `GetProcessMemoryInfo`\n"}],"Base.Sys.MACHINE":[{"Union{}":"    Sys.MACHINE\n\nA string containing the build triple.\n"}],"Base.Sys.CPU_THREADS":[{"Union{}":"    Sys.CPU_THREADS\n\nThe number of logical CPU cores available in the system, i.e. the number of threads\nthat the CPU can run concurrently. Note that this is not necessarily the number of\nCPU cores, for example, in the presence of\n[hyper-threading](https://en.wikipedia.org/wiki/Hyper-threading).\n\nSee Hwloc.jl or CpuId.jl for extended information, including number of physical cores.\n"}],"Base.Sys.isexecutable":[{"Tuple{String}":"    Sys.isexecutable(path::String)\n\nReturn `true` if the given `path` has executable permissions.\n"}],"Base.Sys.isbsd":[{"Tuple{Symbol}":"    Sys.isbsd([os])\n\nPredicate for testing if the OS is a derivative of BSD.\nSee documentation in [Handling Operating System Variation](@ref).\n\n!!! note\n    The Darwin kernel descends from BSD, which means that `Sys.isbsd()` is\n    `true` on macOS systems. To exclude macOS from a predicate, use\n    `Sys.isbsd() && !Sys.isapple()`.\n"}],"Base.Sys.KERNEL":[{"Union{}":"    Sys.KERNEL\n\nA symbol representing the name of the operating system, as returned by `uname` of the build configuration.\n"}],"Base.Sys.which":[{"Tuple{String}":"    Sys.which(program_name::String)\n\nGiven a program name, search the current `PATH` to find the first binary with\nthe proper executable permissions that can be run and return an absolute path\nto it, or return `nothing` if no such program is available. If a path with\na directory in it is passed in for `program_name`, tests that exact path\nfor executable permissions only (with `.exe` and `.com` extensions added on\nWindows platforms); no searching of `PATH` is performed.\n"}],"Base.Sys.loadavg":[{"Tuple{}":"    Sys.loadavg()\n\nGet the load average. See: https://en.wikipedia.org/wiki/Load_(computing).\n"}],"Base.Sys.isunix":[{"Tuple{Symbol}":"    Sys.isunix([os])\n\nPredicate for testing if the OS provides a Unix-like interface.\nSee documentation in [Handling Operating System Variation](@ref).\n"}],"Base.Sys.isfreebsd":[{"Tuple{Symbol}":"    Sys.isfreebsd([os])\n\nPredicate for testing if the OS is a derivative of FreeBSD.\nSee documentation in [Handling Operating System Variation](@ref).\n\n!!! note\n    Not to be confused with `Sys.isbsd()`, which is `true` on FreeBSD but also on\n    other BSD-based systems. `Sys.isfreebsd()` refers only to FreeBSD.\n!!! compat \"Julia 1.1\"\n    This function requires at least Julia 1.1.\n"}],"Base.Sys.get_process_title":[{"Tuple{}":"    Sys.get_process_title()\n\nGet the process title. On some systems, will always return an empty string.\n"}],"Base.Sys.total_memory":[{"Tuple{}":"    Sys.total_memory()\n\nGet the total memory in RAM (including that which is currently used) in kilobytes.\n"}],"Base.Sys.ARCH":[{"Union{}":"    Sys.ARCH\n\nA symbol representing the architecture of the build configuration.\n"}],"Base.Sys.uptime":[{"Tuple{}":"    Sys.uptime()\n\nGets the current system uptime in seconds.\n"}],"Base.Sys.isdragonfly":[{"Tuple{Symbol}":"    Sys.isdragonfly([os])\n\nPredicate for testing if the OS is a derivative of DragonFly BSD.\nSee documentation in [Handling Operating System Variation](@ref).\n\n!!! note\n    Not to be confused with `Sys.isbsd()`, which is `true` on DragonFly but also on\n    other BSD-based systems. `Sys.isdragonfly()` refers only to DragonFly.\n!!! compat \"Julia 1.1\"\n    This function requires at least Julia 1.1.\n"}],"Base.Sys.iswindows":[{"Tuple{Symbol}":"    Sys.iswindows([os])\n\nPredicate for testing if the OS is a derivative of Microsoft Windows NT.\nSee documentation in [Handling Operating System Variation](@ref).\n"}]}